#!/usr/bin/env python3
# A python script for renaming a file in a directory its last
# modification date, copying it, and then moving it to another directory.
# Script will also check for duplicates files before copying and moving.
# A incrementing number is used for each individual file name.
# Script is currently made to work within a cowrie honeypot but can easily be
# modified.
# Warning: script will ignore directories unless modified
# Warning: metadata is not copied when this script performs using shutil

import shutil
import hashlib
import os
import os.path
from os import path
import platform
import stat
import time
import datetime
import sys
import subprocess
from io import StringIO
from datetime import datetime

check_if_exist = "/data/cowrie/downloads.tgz.20" # You can change this

def copy_move():
	def checkExists(checkExists):
		# check if a file exist
		return str(path.exists('/data/cowrie/downloads.tgz.20'))

	# Method checks to see if duplicate file is present in directory
	def dupeCheck(cow, dirPath, creationDate, count):
		print(count)
		# while loop iterates until it finds a duplicate file
		# if no duplicate is found then it returns count to create next file
		while True:
			if path.exists(dirPath+'/'+creationDate+"."+str(count)):
				print("Path exists for count", count)
				count += 1
				if compareHash(cow, dirPath+'/'+creationDate+"."+str(count)) == True:
					print("Compare hash works for ", count)
					return -1
			else:
				print("Path not exists for count", count)
				return count

	# Method checks to see if duplicate file is present in log directory
	def dupeCheckLog(cow, dirPath, count):
		# while loop iterates until it finds a duplicate file
		# if no duplicate is found then it returns count to create next file
		while True:
			if path.exists(dirPath+"/"+"log"+str(count)+".gz"):
				count += 1
				if compareHash(cow, dirPath+"/"+"log"+str(count)+".gz") == True:
					return -1
			else:
				return count

	# Method to check if two files are same.
	def compareHash(path1, path2):
		print("Entered compareHash method.")
		sha256_p1 = "1"
		sha256_p2 = "0"

		try:
			sha256_p1 = hashlib.sha256(open(path1,'rb').read()).hexdigest()
			sha256_p2 = hashlib.sha256(open(path2,'rb').read()).hexdigest()
		except FileNotFoundError:
			print("File not found. Returning false.")
			print(sha256_p1)
			print(sha256_p2)
			return False

		if sha256_p1 == sha256_p2:
			print("File match found.")
			return True

		return False

	def moveFile():
		# dictionary for converting each month of the year to a number for formatting
		print("moving file...")
		cal = {
		'Jan' : '01',
		'Feb' : '02',
		'Mar' : '03',
		'Apr' : '04',
		'May' : '05',
		'Jun' : '06',
		'Jul' : '07',
		'Aug' : '08',
		'Sep' : '09',
		'Oct' : '10',
		'Nov' : '11',
		'Dec' : '12',
		}

		# We format the date to appear like this: 06.25.2020
		grabMonth = ""
		creationDate = ""


		# iterate through current working directory
		count = 1001 # keep track of number of files
		logcnt = 1001 # keep track of log copy count
		match = False
		match2 = False

		for file in os.listdir("/data/cowrie/"):
			filename = os.fsdecode(file) # grab filename
			if filename == "downloads.tgz.20":
				print("found downloads.tgz.20")
				# check the current file type and send it to stdout
				out = subprocess.Popen(['file', file],
				stdout=subprocess.PIPE,
				stderr=subprocess.STDOUT)
				stdout,stderr = out.communicate()

				# if statement to make sure we avoid directories and the script itself.
				# next three lines grab the last modification time of the file
				print("copying and moving file...")
				fileStatsObj = os.stat ("/data/cowrie/"+filename)
				modificationTime = time.ctime ( fileStatsObj [ stat.ST_MTIME ] )
				splitDate = modificationTime.split( )
				month = splitDate[1]
				day = splitDate[2]
				year = splitDate[4]

				if month in cal:
					#print(cal[month])
					grabMonth = cal[month]
					creationDate = grabMonth + "." + day + "." + year

				# Reference: https://thispointer.com/how-to-create-a-directory-in-python/
				today = "/mnt/zeus-share/" + creationDate
				try:
					# Create target directory
					os.mkdir(today)
				except FileExistsError:
					print("Directory already exist for today.")

				# set current new file name
				current = creationDate+"."+str(count)

				# if files were not found earlier they will be copied now...
				print("Value of current:", current)
				print("Copying from cowrie directory.")
				if compareHash(today+'/'+current, "/data/cowrie/"+filename) == False:
					cowcnt = dupeCheck("/data/cowrie/"+filename, today, creationDate, count)
					print("Value of cowcnt", cowcnt)
					if cowcnt != -1:
						current = creationDate+"."+str(cowcnt)

						print("Value of current:", current)
						shutil.copyfile("/data/cowrie/"+filename, current)
						shutil.move(current, today)
					else:
						print("Duplicate file found!")

				print("Copying from log directory.")
				if compareHash("/data/cowrie/log/cowrie.json.20.gz", today+"/"+"log"+str(count)+".gz") == False:
					logcnt = dupeCheckLog("/data/cowrie/log/cowrie.json.20.gz", today, count)

					if logcnt != -1:
						count = logcnt

						shutil.copyfile("/data/cowrie/log/cowrie.json.20.gz", "log"+str(count)+".gz")
						# os.rename(r''+filename,r''+newFile+str(count))
						# Move file
						shutil.move("log"+str(count)+".gz", today)

	if checkExists(check_if_exist) == "True":
		moveFile()
	else:
		print("Specified file does not exist!")

copy_move()
